{"ast":null,"code":"var _jsxFileName = \"/Users/yangjingkun/admin-test/project-funding-frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport contractABI from '../abi/contractABI.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAdminStatus = async () => {\n      try {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n        const contractAddress = '0x5F71A58F00d8530C4df07c04Ac0836F32baD026c';\n        const contract = new ethers.Contract(contractAddress, contractABI, signer);\n        const owner = await contract.owner();\n        if (address.toLowerCase() === owner.toLowerCase()) {\n          setIsAdmin(true);\n        }\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Failed to verify admin status', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAdminStatus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAdmin,\n      isAuthenticated,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"R35zY8ZilWxqEsPXlaDMh5+lEYU=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","ethers","contractABI","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAdmin","setIsAdmin","isAuthenticated","setIsAuthenticated","loading","setLoading","checkAdminStatus","window","ethereum","request","method","provider","providers","Web3Provider","signer","getSigner","address","getAddress","contractAddress","contract","Contract","owner","toLowerCase","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yangjingkun/admin-test/project-funding-frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport contractABI from '../abi/contractABI.json';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const checkAdminStatus = async () => {\r\n      try {\r\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const address = await signer.getAddress();\r\n        \r\n        const contractAddress = '0x5F71A58F00d8530C4df07c04Ac0836F32baD026c';\r\n        const contract = new ethers.Contract(contractAddress, contractABI, signer);\r\n        \r\n        const owner = await contract.owner();\r\n        if (address.toLowerCase() === owner.toLowerCase()) {\r\n          setIsAdmin(true);\r\n        }\r\n        setIsAuthenticated(true);\r\n      } catch (error) {\r\n        console.error('Failed to verify admin status', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAdminStatus();\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAdmin, isAuthenticated, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMe,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;QAChE,MAAMC,QAAQ,GAAG,IAAInB,MAAM,CAACoB,SAAS,CAACC,YAAY,CAACN,MAAM,CAACC,QAAQ,CAAC;QACnE,MAAMM,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;QACnC,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC;QAEzC,MAAMC,eAAe,GAAG,4CAA4C;QACpE,MAAMC,QAAQ,GAAG,IAAI3B,MAAM,CAAC4B,QAAQ,CAACF,eAAe,EAAEzB,WAAW,EAAEqB,MAAM,CAAC;QAE1E,MAAMO,KAAK,GAAG,MAAMF,QAAQ,CAACE,KAAK,CAAC,CAAC;QACpC,IAAIL,OAAO,CAACM,WAAW,CAAC,CAAC,KAAKD,KAAK,CAACC,WAAW,CAAC,CAAC,EAAE;UACjDrB,UAAU,CAAC,IAAI,CAAC;QAClB;QACAE,kBAAkB,CAAC,IAAI,CAAC;MAC1B,CAAC,CAAC,OAAOoB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD,CAAC,SAAS;QACRlB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAAE1B,OAAO;MAAEE,eAAe;MAAEE;IAAQ,CAAE;IAAAN,QAAA,EAChEA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC/B,EAAA,CApCWF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAsCzB,eAAeD,WAAW;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}